@page "/vendedor/delete/{Id:int}"

@rendermode InteractiveServer

@inject ApplicationDbContext Context

@inject NavigationManager Navigation

<h1>Apagar</h1>

<EditForm Model="@Model" OnSubmit="ApagarVendedorAsync">
    <div class="mb-3">
        <label class="form-label" for="nome">Nome</label>
        <InputText id="nome" class="form-control" @bind-Value="Model.Nome" readonly/>
    </div>
    <div class="mb-3">
        <label class="form-label" for="email">E-mail</label>
        <InputText id="email" class="form-control" @bind-Value="Model.Email" readonly/>
    </div>
    <div class="mb-3">
        <label class="form-label" for="regiao">Região</label>
        <InputText id="regiao" class="form-control" @bind-Value="Model.Regiao.Nome" readonly/>
    </div>
    <a href="/vendedor" class="btn btn-primary">voltar</a>
    &nbsp;
    <button type="submit" class="btn btn-danger">Apagar</button>

</EditForm>

@code
{
    [Parameter]
    public int Id{get;set;}

    public Vendedor Model{get;set;} = new();

    protected override async Task OnInitializedAsync()
    {
        Vendedor? ResultadoPesquisa = await Context.Vendedores
            .Include(x => x.Regiao)
            .FirstOrDefaultAsync<Vendedor>(x => x.Id == Id);   
        
        if(ResultadoPesquisa == null)
            throw new Exception("Vendedor não encontrato. Impossível apagar Vendedor");
        else 
            Model = (Vendedor) ResultadoPesquisa;
    }

    public async Task ApagarVendedorAsync()
    {
        Context.Remove<Vendedor>(Model);
        await Context.SaveChangesAsync();
        Navigation.NavigateTo("vendedor");
    }
}