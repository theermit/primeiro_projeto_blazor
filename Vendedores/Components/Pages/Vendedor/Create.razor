@page "/vendedor/create"



@rendermode InteractiveServer

@inject ApplicationDbContext Context
@inject NavigationManager Navigation
<h1>Novo Vendedor</h1>

<EditForm Model="@Model" OnValidSubmit="CriarVendedorAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label" for="nome">Nome</label>
        <InputText id="nome" class="form-control" @bind-Value="Model.Nome"/>
        <ValidationMessage For="@(() => Model.Nome)" />
    </div>
    <div class="mb-3">
        <label class="form-label" for="email">E-mail</label>
        <InputText id="email" class="form-control" @bind-Value="Model.Email"/>
        <ValidationMessage For="@(() => Model.Email)" />
    </div>
    <div class="mb-3">
        <label class="form-label" for="regiao">Regi√£o</label>
        <InputSelect id="regiao" class="form-control" @bind-Value="Model.RegiaoId">
            @foreach(var Regiao in Regioes)
            {
                <option value="@Regiao.Id">@Regiao.Nome</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Model.RegiaoId)" />
    </div>
    <a href="/regiao" class="btn btn-primary">voltar</a>
    <button type="submit" class="btn btn-success">Criar</button>

</EditForm>

@code {
    public Vendedor Model {get; set;} = new();

    public IEnumerable<Regiao> Regioes {get; set;} = new List<Regiao>();

    protected override async void OnInitialized()
    {
        Regioes = await Context.Regioes.ToListAsync<Regiao>();
    } 

    private async Task CriarVendedorAsync()
    {
        await Context.Vendedores.AddAsync(Model);
        await Context.SaveChangesAsync();
        Navigation.NavigateTo("Vendedor");
    }
}    
